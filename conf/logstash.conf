#=================================== log-inputs =====================================
input {
  beats {
    port => 5044
  }
}
#=================================== log-filter =====================================

filter {	
  if [logtype] == "nginx_access_log" {
    grok {
      match => {
        "message" => ["%{IPORHOST:remote_host} - %{USERNAME:user} \[%{TIMESTAMP_ISO8601:request_time}\] \"%{WORD:request_method} %{DATA:request_url} HTTP/%{NUMBER:request_version}\" %{NUMBER:response_code} %{NUMBER:send_byte} \"%{DATA:refferer}\" \"%{DATA:agent}\" \"%{DATA:client_ip}\"%{DATA:server_host} %{NUMBER:upstream_response_code} %{IPORHOST:upstream_host}:%{NUMBER:upstream_port} %{NUMBER:response_time_consum} %{NUMBER:upstream_response_time_consum}"]
      }
    }
    date {
      match => ["request_time","YYYY-MM-dd'T'HH:mm:ss"]
      timezone => "Asia/Shanghai"
      target => ["@timestamp"]
    }                   
    if [client_ip] == "-" {
      mutate {
	replace => { 
          "client_ip" => "0.0.0.0" 
        }
      }
    }
    geoip {
      source => ["client_ip"]
    }
    mutate {
      remove_field => ["user","refferer","request_version","server_host","upstream_port","beat","input","source","prospector","@version","tags","host","message"]
      convert => ["upstream_response_time_consum", "float"]
      convert => ["response_time_consum", "float"]
      convert => ["send_byte", "float"]
    }
    kv{
      source => "request_url"
      field_split => "&?"
      value_split => "="
    }
    urldecode {
      field => "request_url"
   }
  }
  else if [logtype] == "nginx_error_log" {
    grok {
      match => { 
        "message" => ["%{DATA:error_time} \[%{DATA:error_level}\] %{NUMBER:error_pid}#%{NUMBER:error_tid}: \*%{NUMBER:error_connection_id} %{GREEDYDATA:error_message}"]
      }
    }
    mutate {
      remove_field => ["input","tags","prospector","source","beat","@version","host"]
    }
  }
  else if [logtype] == "mysqld_log" {
    grok {
      match => {
        "message" => []
      }
    }
    mutate {
      remove_field => []
    }
  }
  else if [logtype] == "tomcat_log" {
    grok {
      match => {
        "message" => ["%{TIME:ca_log_time} \[%{DATA:main}\] %{WORD:ca_log_level}   - %{GREEDYDATA:ca_log}"]
      }
    }
    json {
      source => "ca_log" 
    }
    mutate {
      remove_field => ["source","@version","prospector","ca_log","beat","ca_log_level","input","message","tags","ca_log_time"]
      rename => ["x_requested_with", "x_requested_with_tmp"]
      rename => ["requestid", "requestid_tmp"]
    }
    if [method] == "POST" {
      grok {
        match => {
          "params" => ["%{GREEDYDATA:parm_tmp1};sm=%{GREEDYDATA:parm_tmp2};%{DATA:parm_tmp3};%{DATA:parm_tmp4};"]
        }
      }
      json {
        source => "parm_tmp2"
      }
    }
  }
  else if [logtype] == "squid_log" {
    grok {
      match => {
        "message" => []
      }
    }
    mutate {
      remove_field => []
    }
  }
}
#=================================== log-output =====================================
output {
  stdout {
    codec => rubydebug
  }
}
